Name: I-vs-N
Description: Interaction between I and N
Processes: 8
Sleep: 5
Steps:
    network:
        Extension: gml
        Walltime: 00:00:30
        Parameters:
            net_N: "[i*500 for i in range(1,31)]"
            replicate: "range(5)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- SIR.net(sample_pa({net_N}, m=2, directed=FALSE))
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(g, "{network}", format="gml")

    tree:
        Extension: nwk
        Walltime: 00:00:30
        Parameters:
            net_N: "[i*500 for i in range(1, 31)]"
            net_I: "[i*250 for i in range(2, 21)]"
            replicate: "range(5)"
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            if [[ {net_I} -le {net_N} ]]; then
                nettree {network} --seed {seed} --sim-nodes {net_I} >> {tree}
            fi

    trajectory:
        Extension: tsv
        Parameters:
            net_N: "[i*500 for i in range(1,31)]"
            net_I: "[i*250 for i in range(2, 21)]"
            replicate: "range(5)"
        Depends: network tree
        Interpreter: R --silent --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            if ({net_N} < {net_I}) {{
                cat("#{yaml}\n", file="{trajectory}")
            }} else {{
                N <- vcount(read.graph("{network}", "gml"))
                t <- read.tree("{tree}")
                times <- node.depth.edgelength(t)
                time.order <- order(times)
                times <- times[time.order]
    
                S <- N-2
                I <- 2
    
                for (i in tail(time.order, -1)) {{
                    if (i > Ntip(t)) {{
                        S <- c(S, tail(S, 1)-1)
                        I <- c(I, tail(I, 1)+1)
                    }}
                }}
    
                df <- data.frame(t=times[time.order > Ntip(t)], S=S, I=I)
                cat("#{yaml}\n", file="{trajectory}")
                write.tsv(df, "{trajectory}", append=TRUE)
            }}

    derivatives:
        Extension: tsv
        Parameters:
            normalize: ["none", "I", "t", "both"]
        Depends: trajectory
        Interpreter: R --silent --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            m <- collect.metadata(strsplit("{trajectory}", " ")[[1]])
            m <- subset(m, net_I <= net_N)

            d <- setDT(collect.data(rownames(m)))
            logis <- expression(Asym/(1+exp((xmid-input)/scal)))
            d.logis <- D(logis, "input")
            d2.logis <- D(d.logis, "input")

            if ("{normalize}" %in% c("I", "both")) {{
                d[,I := I / net_N]
            }}
            if ("{normalize}" %in% c("t", "both")) {{
                d[,t := t / max(t), by=c("net_I", "net_N", "replicate")]
            }}

            get.deriv <- function (sd) {{
                coefs <- tryCatch({{
                    coef(nls(I~SSlogis(t, Asym, xmid, scal), sd))
                }}, error = function (e) {{
                    c(Asym=0, xmid=0, scal=0)
                }})
                coefs <- as.list(c(coefs, input=sd[,max(t)]))
                list(d1=eval(d.logis, coefs), d2=eval(d2.logis, coefs))
            }}
            d <- d[,get.deriv(.SD), by=c("net_N", "net_I", "replicate")]
            cat("#{yaml}\n", file="{derivatives}")
            write.tsv(d, "{derivatives}", append=TRUE)

    derivative-plot:
        Extension: pdf
        Parameters:
            normalize: "I"
        Depends: derivatives
        Interpreter: R --silent --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- fread("{derivatives}")
            p <- d[,list(d1=mean(na.omit(d1)), d2=mean(na.omit(d2))), by=c("net_N", "net_I")]
            ggplot(p, aes(x=net_N, y=net_I, z=d1, fill=d2)) + 
                geom_raster() +
                geom_contour(colour="white", size=3) + 
                geom_contour(aes(colour=..level..), size=2) +
                scale_fill_distiller(name=expression(paste(d^2, "I/d", t^2)),
                                     type="div", palette="RdBu") +
                scale_colour_distiller(name="dI/dt",
                                       type="seq", palette="Greys") +
                geom_point(y=1000, x=5000, size=7, shape=18, color="magenta") +
                geom_point(y=2000, x=5000, size=7, shape=18, color="magenta") +
                theme_bw() +
                labs(x="N", y="I")
            ggsave("{derivative-plot}", height=4, width=5)
