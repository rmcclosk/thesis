Name: abc-pa-sir
Description: ABC inference on 2-parameter preferential attachment networks with SIR dynamics
Processes: 1
Sleep: 5
Steps:
    network:
        Extension: gml
        Walltime: 00:00:30
        Parameters:
            true_N: 5000
            true_m: [1, 2]
            true_alpha: [0.0, 0.5, 1.0, 1.5]
            true_transmissibility: [0.1, 0.5, 0.9]
            replicate: "range(1)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_pa({true_N}, m={true_m}, power={true_alpha}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SIR.net(g, transmit.rate=1, 
                        remove.rate=(1-{true_transmissibility})/{true_transmissibility}), 
                        "{network}", format="gml")

    tree:
        Extension: nwk
        Walltime: 00:00:30
        Parameters:
            true_m: [1, 2]
            true_alpha: [0.0, 0.5, 1.0, 1.5]
            true_transmissibility: [0.1, 0.5, 0.9]
            replicate: "range(1)"
            ntip: 500
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --tree-tips {ntip} --seed {seed} {network} >> {tree}

    abc-config:
        Extension: yaml
        Walltime: 00:00:30
        Parameters:
            N_min: 500
            N_max: 15000
            remove_min: 0
            remove_max: 1
            m_min: 1
            m_max: 5
            alpha_min: 0
            alpha_max: 2
        Interpreter: bash
        Rule: |
            echo "N: [\"uniform\", {N_min}, {N_max}]" > {abc-config}
            echo "I: 0" >> {abc-config}
            echo "time: 0" >> {abc-config}
            echo "transmit_rate: 1" >> {abc-config}
            echo "remove_rate: [\"uniform\", {remove_min}, {remove_max}]" >> {abc-config}
            echo "m: [\"discrete_uniform\", {m_min}, {m_max}]" >> {abc-config}
            echo "alpha: [\"uniform\", {alpha_min}, {alpha_max}]" >> {abc-config}

    abc:
        Extension: tsv.bz2
        Processes: 1
        Threads: 12
        Walltime: 012:00:00
        Sleep: 600
        Parameters:
            true_N: 5000
            true_m: [1, 2, 3, 4]
            true_alpha: [0.0, 0.5, 1.0, 1.5]
            true_transmissibility: [0.1, 0.5, 0.9]
            replicate: "range(1)"
            true_I: [1000, 2000, 3000]
            ntip: 500
            N_min: 500
            N_max: 15000
            remove_min: 0
            remove_max: 1
            m_min: 1
            m_max: 5
            alpha_min: 0
            alpha_max: 2
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 1000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
        Depends: tree abc-config
        Interpreter: bash
        Rule: |
            TSVFILE=`echo {abc} | sed s/'.bz2'//`
            echo "#{yaml}" > $TSVFILE
            if [[ "{nltt}" == "1" ]]; then
                NLTT=--nltt
            else
                NLTT=""
            fi
            netabc --num-threads 12 --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   $NLTT --net-type pa --trace $TSVFILE --seed {seed} {tree} {abc-config}
            echo "EOF" >> $TSVFILE
            bzip2 $TSVFILE

    point-estimate:
        Processes: 0
        Extension: tsv
        Walltime: 00:30:00
        Memory: 2048m
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 1000
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(coda))
        Rule: |
            trace.files <- strsplit("{abc}", " ")[[1]]
            lines <- sapply(paste("bzcat", trace.files, "| wc -l"), system, intern=TRUE)
            end <- as.integer(lines)-1
            start <- end - {nparticle} + 1
            cmd <- paste0("bzcat ", trace.files, " | sed -n -e 1,2p -e ", start, ",", end, "p")
            d <- lapply(cmd, fread)
            md <- collect.metadata(trace.files)
            d <- rbindlist(mapply(cbind, by(md, 1:nrow(md), as.data.table), d, SIMPLIFY=FALSE))
            params <- c("N", "remove", "alpha", "m")

            by.cols <- c("ntip", paste0("true_", params), "replicate")
            d <- d[,.SD[iter == max(iter),], by=by.cols]
            d <- d[,.SD[sample(1:nrow(.SD), prob=weight, replace=TRUE),], by=by.cols]

            for (p in params) {{
                d[,paste0(p, c(".lower", ".upper")) := as.list(HPDinterval(mcmc(.SD[[p]]), 0.95)), by=by.cols]
            }}

            d <- d[,N := density(N)$x[which.max(density(N)$y)], by=by.cols]
            d <- d[,remove := density(remove)$x[which.max(density(remove)$y)], by=by.cols]
            d <- d[,alpha := density(alpha)$x[which.max(density(alpha)$y)], by=by.cols]
            d <- d[,m := density(m)$x[which.max(density(m)$y)], by=by.cols]

            d <- setkeyv(d, by.cols)
            d <- unique(d)
            cat("#{yaml}\n", file="{point-estimate}")
            write.tsv(d, "{point-estimate}", append=TRUE)
