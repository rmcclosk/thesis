Name: abc-pa
Description: ABC inference on 2-parameter preferential attachment networks
Processes: 1
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            m: [1, 2, 3]
            power: [0.1, 0.5, 1]
            replicate: [0, 1]
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(VGAM))
        Rule: | 
            set.seed({seed})
            g <- sample_pa({nnode}, m={m}, power={power}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            m: [1, 2, 3]
            power: [0.1, 0.5, 1]
            ntip: 1000
            nsimnode: 1000
            replicate: [0, 1]
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} {network} >> {tree}

    abc-config:
        Extension: yaml
        Parameters:
            nnode: 5000
            nsimnode: 1000
            m_min: 1
            m_max: 5
            power_min: 0
            power_max: 2
        Interpreter: bash
        Rule: |
            echo "nodes: {nnode}" > {abc-config}
            echo "sim_nodes: {nsimnode}" >> {abc-config}
            echo "sim_time: 0" >> {abc-config}
            echo "transmit: 1" >> {abc-config}
            echo "remove: 0" >> {abc-config}
            echo "edges_per_vertex: [\"uniform\", {m_min}, {m_max}]" >> {abc-config}
            echo "attach_power: [\"uniform\", {power_min}, {power_max}]" >> {abc-config}

    abc:
        Extension: tsv
        Processes: 1
        Parameters:
            m: [1, 2, 3]
            power: [0.1, 0.5, 1]
            replicate: [0, 1]
            nthread: 20
            decay_factor: 0.3
            rbf_variance: 5
            nparticle: 1000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
        Depends: tree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {abc}
            netabc --num-threads {nthread} --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   --net-type pa --trace {abc} {tree} {abc-config} 

    sanity-plot:
        Extension: pdf
        Parameters:
            m: [1, 2, 3]
            power: [0.1, 0.5, 1]
            replicate: [0, 1]
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(data.table))
        Rule: |
            d <- fread("{abc}")
            d[,particle := 1:nrow(.SD), by=iter]
            d <- melt(d, id.vars=grep("X", colnames(d), value=TRUE, invert=TRUE), 
                      variable.name="sample", value.name="distance")
            setkey(d, iter, particle)
            d[,med.dist := median(distance), by=c("iter", "particle")]
            d <- unique(d)

            pdf("{sanity-plot}")
            for (i in unique(d$iter)) {{
                p <- ggplot(subset(d, iter==i), aes(x=edges_per_vertex, y=attach_power)) + 
                    geom_point(aes(size=med.dist, color=med.dist)) + 
                    geom_point(x={m}, y={power}, color="red", size=8) + 
                    xlim(1, 5) + ylim(0, 2) + ggtitle(paste("iteration", i)) +
                    theme_bw()
                print(p)
            }}
            dev.off()

    iter-plot:
        Extension: pdf
        Parameters:
            m: [1, 2, 3]
            power: [0.1, 0.5, 1]
            replicate: [0, 1]
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(plyr))
            suppressPackageStartupMessages(library(gridExtra))
            suppressPackageStartupMessages(library(data.table))
        Rule: |
            d <- fread("{abc}")
            d <- d[,.SD[sample(1:nrow(.SD), prob=weight, replace=TRUE),], by=iter]

            pdf("{iter-plot}")
            p <- ggplot(d, aes(x=edges_per_vertex)) + geom_density() + geom_vline(xintercept={m}) + xlim(1, 5) + ggtitle("m") + theme_bw()
            plots <- dlply(d, "iter", `%+%`, e1=p)
            do.call(marrangeGrob, list(grobs=plots, nrow=3, ncol=3))

            p <- ggplot(d, aes(x=attach_power)) + geom_density() + geom_vline(xintercept={power}) + xlim(0, 2) + ggtitle("power") + theme_bw()
            plots <- dlply(d, "iter", `%+%`, e1=p)
            do.call(marrangeGrob, list(grobs=plots, nrow=3, ncol=3))

            dev.off()
