Name: abc-pa
Description: ABC inference on 2-parameter preferential attachment networks
Processes: 1
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            m: 2
            power: [0.0, 0.5, 1, 1.5]
            replicate: 0
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_pa({nnode}, m={m}, power={power}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SIR.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            m: 2
            power: [0.0, 0.5, 1, 1.5]
            replicate: [0, 1]
            nsimnode: 1000
            ntip: 1000
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} {network} >> {tree}

    abc-config:
        Extension: yaml
        Parameters:
            nnode: 5000
            nnode_min: 1000
            nnode_max: 10000
            nnode_prior: ["uniform", "delta"]
            nsimnode: 1000
            m: 2
            power_min: 0
            power_max: 2
        Interpreter: bash
        Rule: |
            if [[ "{nnode_prior}" == "uniform" ]]; then
                echo "nodes: [\"uniform\", {nnode_min}, {nnode_max}]" > {abc-config}
            else
                echo "nodes: {nnode}" > {abc-config}
            fi
            echo "sim_nodes: {nsimnode}" >> {abc-config}
            echo "sim_time: 0" >> {abc-config}
            echo "transmit: 1" >> {abc-config}
            echo "remove: 0" >> {abc-config}
            echo "edges_per_vertex: {m}" >> {abc-config}
            echo "attach_power: [\"uniform\", {power_min}, {power_max}]" >> {abc-config}

    abc:
        Extension: tsv
        Processes: 0
        Threads: 12
        Walltime: 03:00:00
        Parameters:
            nnode_prior: ["uniform", "delta"]
            m: 2
            power: [0.0, 0.5, 1, 1.5]
            replicate: 0
            nthread: 12
            decay_factor: 0.3
            rbf_variance: 2
            nltt: [0, 1]
            nparticle: 1000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
        Depends: tree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {abc}
            if [[ "{nltt}" == "1" ]]; then
                NLTT=--nltt
            else
                NLTT=""
            fi
            netabc --num-threads {nthread} --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   $NLTT --net-type pa --trace {abc} --seed {seed} {tree} {abc-config}
            echo "EOF" >> {abc}
