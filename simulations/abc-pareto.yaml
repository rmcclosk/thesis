Name: abc-pareto
Processes: 1
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            pareto_shape: [1, 1.5, 2]
            replicate: [0, 1]
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(VGAM))
        Rule: | 
            set.seed({seed})
            g <- sample_degseq(2, method="simple")
            while (any(which_loop(g)) | any(which_multiple(g))) 
            {{
                s <- 1
                while (!is_graphical(s)) {{
                    s <- round(rpareto({nnode}, shape={pareto_shape}))
                }}
                g <- tryCatch({{sample_degseq(s, method="vl")}},
                              error = function (e) sample_degseq(2, method="simple"))
                                
            }}
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            pareto_shape: [1, 1.5, 2]
            ntip: 1000
            nsimnode: 1000
            replicate: [0, 1]
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            SEED={seed}
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed $SEED {network} >> {tree}
            while [[ `treestat -i -s ntip {tree}` -lt {ntip} ]]; do
                SEED=$(($SEED+1))
                echo "#{yaml}" > {tree}
                nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed $SEED {network} >> {tree}
            done

    abc-config:
        Extension: yaml
        Parameters:
            nnode: 5000
            nsimnode: 1000
            shape_min: 1
            shape_max: 2
        Interpreter: bash
        Rule: |
            echo "nodes: {nnode}" > {abc-config}
            echo "sim_nodes: {nsimnode}" >> {abc-config}
            echo "sim_time: 0" >> {abc-config}
            echo "transmit: 1" >> {abc-config}
            echo "remove: 0" >> {abc-config}
            echo "pareto_shape: [\"uniform\", {shape_min}, {shape_max}]" >> {abc-config}

    abc:
        Extension: tsv
        Processes: 1
        Parameters:
            pareto_shape: [1, 1.5, 2]
            ntip: 1000
            replicate: 0
            nthread: 20
            decay_factor: 0.4
            rbf_variance: 5
            nparticle: 1000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
        Depends: tree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {abc}
            netabc --num-threads {nthread} --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   --net-type pareto --trace {abc} {tree} {abc-config} 

    iter-plot:
        Extension: pdf
        Parameters:
            pareto_shape: [1, 1.5, 2]
            replicate: 0
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(plyr))
            suppressPackageStartupMessages(library(gridExtra))
            suppressPackageStartupMessages(library(data.table))
        Rule: |
            d <- fread("{abc}")
            d <- d[,.SD[sample(1:nrow(.SD), prob=weight, replace=TRUE),], by=iter]
            # http://stackoverflow.com/questions/19059826/multiple-graphs-over-multiple-pages-using-ggplot
            p <- ggplot(d, aes(x=pareto_shape)) + geom_density() + geom_vline(xintercept={pareto_shape}) + xlim(1, 2) + theme_bw() + ggtitle("pareto shape")
            plots <- dlply(d, "iter", `%+%`, e1=p)
            pdf("{iter-plot}")
            do.call(marrangeGrob, list(grobs=plots, nrow=3, ncol=3))
            dev.off()

    sanity-plot:
        Extension: pdf
        Parameters:
            pareto_shape: [1, 1.5, 2]
            replicate: 0
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(plyr))
            suppressPackageStartupMessages(library(gridExtra))
            suppressPackageStartupMessages(library(data.table))
        Rule: |
            d <- fread("{abc}")
            d <- d[, X0 := ifelse(is.finite(X0), X0, 1)]
            d <- d[,.SD[sample(1:nrow(.SD), prob=1-X0, replace=TRUE),], by=iter]
            # http://stackoverflow.com/questions/19059826/multiple-graphs-over-multiple-pages-using-ggplot
            p <- ggplot(d, aes(x=pareto_shape)) + geom_density() + geom_vline(xintercept={pareto_shape}) + xlim(1, 2) + theme_bw() + ggtitle("pareto shape")
            plots <- dlply(d, "iter", `%+%`, e1=p)
            pdf("{sanity-plot}")
            do.call(marrangeGrob, list(grobs=plots, nrow=3, ncol=3))
            dev.off()

    error-plot:
        Extension: pdf
        Parameters:
            replicate: [0, 1]
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(data.table))
        Rule: |
            d <- setDT(collect.data(strsplit("{abc}", " ")[[1]]))
            setnames(d, make.names(colnames(d), unique=TRUE))
            d <- d[,.SD[which(iter == max(iter)),], by=pareto_shape.1]
            d <- d[,.SD[sample(1:nrow(.SD), prob=weight, replace=TRUE),], by=pareto_shape.1]
            pdf("{error-plot}")
            ggplot(d, aes(x=factor(pareto_shape.1), y=pareto_shape)) +
                geom_boxplot() + geom_hline(yintercept=d[,unique(pareto_shape.1)], linetype=2) +
                labs(x="true Pareto shape", y="estimated Pareto shape") +
                theme_bw()
            dev.off()
