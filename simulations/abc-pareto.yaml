Name: abc-pareto
Processes: 1
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            pareto_shape: [1, 1.5, 2]
            seed: !!python/object/apply:__builtin__.xrange [0, 100, 1]
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(igraph))
            suppressPackageStartupMessages(library(VGAM))
        Rule: | 
            set.seed({seed} + {pareto_shape} * 100)
            g <- sample_degseq(2, method="simple")
            while (any(which_loop(g)) | any(which_multiple(g))) 
            {{
                s <- 1
                while (!is_graphical(s)) {{
                    s <- round(rpareto({nnode}, shape={pareto_shape}))
                }}
                g <- tryCatch({{sample_degseq(s, method="vl")}},
                              error = function (e) sample_degseq(2, method="simple"))
                                
            }}
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            nnode: 5000
            pareto_shape: [1, 1.5, 2]
            ntip: 100
            nsimnode: 1000
            seed: !!python/object/apply:__builtin__.xrange [0, 100, 1]
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed `echo {seed}+{pareto_shape}*100 | bc` {network} >> {tree}
            i=0
            while [[ `treestat -i -s ntip {tree}` -lt {ntip} ]]; do
                echo "#{yaml}" > {tree}
                nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed `echo {seed}+{pareto_shape}*\(100+$i\) | bc` {network} >> {tree}
                i=$(($i+1))
            done

    abc-config:
        Extension: yaml
        Parameters:
            nnode: 5000
            nsimnode: 1000
            shape_min: 1
            shape_max: 2
        Interpreter: bash
        Rule: |
            echo "nodes: {nnode}" > {abc-config}
            echo "sim_nodes: {nsimnode}" >> {abc-config}
            echo "pareto_shape: [\"uniform\", {shape_min}, {shape_max}]" >> {abc-config}

    abc:
        Extension: tsv
        Processes: 1
        Parameters:
            nnode: 5000
            pareto_shape: [1, 1.5, 2]
            seed: 0
            nsimnode: 1000
            ntip: 100
            nthread: 8
            decay_factor: 0.4
            rbf_variance: 1
            nparticle: 1000
            nsample: 5
            quality: 0.95
            shape_min: 1
            shape_max: 2
        Depends: tree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {abc}
            netabc --num-threads {nthread} --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   {tree} {abc-config} >> {abc}

    density-plot:
        Extension: pdf
        Parameters:
            nnode: 5000
            pareto_shape: [1, 1.5, 2]
            seed: 0
            nsimnode: 1000
            ntip: 100
            nthread: 8
            decay_factor: 0.4
            rbf_variance: 1
            nparticle: 1000
            nsample: 5
            quality: 0.95
            shape_min: 1
            shape_max: 2
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: library(yaml)
        Rule: |
            yaml <- "{yaml}"
            p <- read.table("{abc}")[,1]
            pdf("{density-plot}")
            plot(density(p), xlab="edges", ylab="posterior density",
                 main=paste(strwrap(as.yaml(yaml.load(yaml)), 60), collapse="\n"))
            abline(v={pareto_shape}, col="red")
            dev.off()
