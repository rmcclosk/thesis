Name: appnote
Description: Figure for nettree application note
Processes: 1
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            nsimnode: 1000
            edge_density: "[i/5000 for i in (2, 4, 6, 8, 10, 12)]"
            replicate: "range(500)"
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_gnp({nnode}, {edge_density})
            while (length(component_distribution(g)) - 1 < {nsimnode}) {{
                g <- sample_gnp({nnode}, {edge_density})
            }}
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            edge_density: "[i/5000 for i in (2, 4, 6, 8, 10, 12)]"
            nsimnode: 1000
            replicate: "range(500)"
            ntip: 1000
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} {network} >> {tree}

    statistics:
        Extension: tsv
        Parameters:
            nnode: 5000
            nsimnode: 1000
            ntip: 1000
        Depends: tree
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {statistics}
            echo -e "\tcolless\tsackin" >> {statistics}
            for T in {tree}; do
                echo -n $T$'\t' >> {statistics}
                echo -n `treestat -i -s colless $T`$'\t' >> {statistics}
                echo `treestat -i -s sackin $T` >> {statistics}
            done

    stats-plot:
        Extension: pdf
        Parameters:
            nnode: 5000
            nsimnode: 1000
            ntip: 1000
        Depends: statistics tree
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(reshape2))
        Rule: |
            m <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"edge_density", drop=FALSE]
            m$edge_density <- as.factor(m$edge_density)
            d <- read.table("{statistics}", header=TRUE)
            d <- merge(m, d, by="row.names")
            d[,"Row.names"] <- NULL
            d <- melt(d, id.vars="edge_density")
            ggplot(d, aes(x=edge_density, y=value)) + geom_violin() + 
                facet_wrap(~variable, scales="free") + theme_bw()
            ggsave("{stats-plot}", height=4)
