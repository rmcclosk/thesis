Name: cuevas2009
Processes: 1
Sleep: 5
Memory: 256m
Steps:
    raw-fasta:
        Extension: fasta
        Parameters:
            pmid: 19282784
        Interpreter: python3
        Startup: |
            from Bio import Entrez
            from datetime import datetime
        Rule: |
            Entrez.email = "rmccloskey@cfenet.ubc.ca"
            epoch = datetime.strptime("01-Jan-1970", "%d-%b-%Y")

            # find all Genbank IDs for this study
            id = "{pmid}"
            handle = Entrez.elink(dbfrom="pubmed", id=id, linkname="pubmed_nuccore")
            record = Entrez.read(handle)
            handle.close()
            gbids = ",".join([x["Id"] for x in record[0]["LinkSetDb"][0]["Link"]])

            # fetch all Genbank records
            handle = Entrez.efetch(db="nuccore", id=gbids, rettype="gb", retmode="xml")
            headers = []
            seqs = []
            for record in Entrez.parse(handle):
                for qual in record["GBSeq_feature-table"][0]["GBFeature_quals"]:
                    header = None
                    if qual["GBQualifier_name"] == "collection_date":
                        date = datetime.strptime(qual["GBQualifier_value"], "%Y")
                        header = "{{}}_{{}}".format(record["GBSeq_locus"], (date - epoch).days // 365)
                        break
                if header is not None:
                    headers.append(header)
                    seqs.append(record["GBSeq_sequence"])

            # write to FASTA file
            with open("{raw-fasta}", "w") as f:
                for header, seq in zip(headers, seqs):
                    f.write(">{{}}\n{{}}\n".format(header, seq))

    align:
        Extension: fasta
        Parameters:
            placeholder: 0
        Depends: raw-fasta
        Interpreter: bash
        Rule: |
            TMP=`mktemp`
            muscle -maxiters 1 -diags1 -in {raw-fasta} -out $TMP
            trimal -in $TMP -automated1 | filter_duplicates > {align}
            rm $TMP

    beast-xml:
        Extension: xml
        Parameters:
            clock: "strict"
            model: "tn93"
            popsize: "constant"
        Depends: align
        Interpreter: bash
        Rule: |
            BEASTGEN=`dirname $(dirname $(locate beastgen.jar | grep $(whoami) | head -n 1))`
            DATASET=`dirname $(dirname {beast-xml})`
            TEMPLATE={clock}_{model}_{popsize}.xml
            TMP=`mktemp`

            $BEASTGEN/bin/beastgen to_nexus.template {align} > $TMP
            $BEASTGEN/bin/beastgen -date_order 2 -D filename=$DATASET $TEMPLATE $TMP > {beast-xml}
            rm $TMP

    beast:
        Extension: tar
        Parameters:
            clock: "strict"
            model: "tn93"
            popsize: "constant"
        Depends: beast-xml
        Interpreter: bash
        Rule: |
            #BEAST=`dirname $(dirname $(locate beast.jar | grep $(whoami) | head -n 1))`
            BEAST=/home/rmcclosk/packages/BEASTv1.8.3
            DATASET=`dirname $(dirname {beast})`
            $BEAST/bin/beast -overwrite -threads 6 {beast-xml}
            tar cf {beast} $DATASET.log $DATASET.ops $DATASET.\(time\).trees $DATASET.\(subst\).trees

    beast-subtree:
        Extension: nwk
        Parameters:
            clock: "strict"
            model: "tn93"
            popsize: "constant"
        Depends: beast
        Interpreter: bash
        Rule: |
            BEAST=/home/rmcclosk/packages/BEASTv1.8.3
            DATASET=`dirname $(dirname {beast})`
            TMP=`mktemp`
            $BEAST/bin/treeannotator -burnin 1000 -burnintrees 1000 $DATASET.\(time\).trees $TMP
            R -e "library(ape); write.tree(read.nexus('$TMP'), '{beast-subtree}')"
            rm $TMP

    subtree:
        Extension: nwk
        Parameters:
            placeholder: 0
        Depends: align
        Interpreter: bash
        Rule: |
            UNROOTED=`mktemp`
            ROOTED=`mktemp`
            RTTJAR=`locate RLRootToTip.jar | head -n 1`
            fasttreeMP -nt -gtr -quiet -nosupport < {align} | nw_reroot - > $UNROOTED
            java -jar $RTTJAR -timetree $ROOTED -newick $UNROOTED
            python3 -c "from Bio import Phylo; Phylo.convert('$ROOTED', 'nexus', '{subtree}', 'newick')"
            rm $ROOTED $UNROOTED

    raxml:
        Extension: nwk
        Parameters:
            placeholder: 0
        Depends: align
        Interpreter: bash
        Rule: |
            RAXML=raxmlHPC-PTHREADS-SSE3
            DATASET=`dirname $(dirname {raxml})`
            $RAXML -s {align} -p {seed} -m GTRGAMMA -n $DATASET -T 32
            mv RAxML_bestTree.$DATASET {raxml}
            rm RAxML*

    lsd-datefile:
        Extension: tsv
        Parameters:
            placeholder: 0
        Depends: align
        Interpreter: bash
        Rule: |
            grep -c '>' {align} > {lsd-datefile}
            grep '>' {align} | tr -d '>' | awk -F '_' '{{print $0"\t"$2}}' >> {lsd-datefile}

    lsd:
        Extension: nwk
        Parameters:
            placeholder: 0
        Depends: raxml lsd-datefile
        Interpreter: bash
        Rule: |
            DATASET=`dirname $(dirname {lsd})`
            lsd -c -d {lsd-datefile} -i {raxml} -o $DATASET.lsd -r as
            mv $DATASET.lsd.date.newick {lsd}
            rm $DATASET.lsd*

    abc-config:
        Extension: yaml
        Parameters:
            m_min: [1, 2]
            m_max: 5
            alpha_min: 0
            alpha_max: 2
            N_max: 10000
            I_max: 10000
        Interpreter: bash
        Depends: subtree
        Rule: |
            NTIP=`treestat -s ntip {subtree}`
            echo "N: [\"uniform\", $NTIP, {N_max}]" > {abc-config}
            echo "I: [\"uniform\", $NTIP, {I_max}]" >> {abc-config}
            echo "time: 0" >> {abc-config}
            echo "transmit_rate: 1" >> {abc-config}
            echo "remove_rate: 0" >> {abc-config}
            echo "m: [\"discrete_uniform\", {m_min}, {m_max}]" >> {abc-config}
            echo "alpha: [\"uniform\", {alpha_min}, {alpha_max}]" >> {abc-config}

    beast-abc:
        Extension: tsv
        Sleep: 600
        Walltime: 024:00:00
        Threads: 12
        Processes: 1
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 10000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
            m_min: [1, 2]
            m_max: 5
            N_max: 10000
            I_max: 10000
            alpha_min: 0
            alpha_max: 2
        Depends: beast-subtree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {beast-abc}
            if [[ {nltt} -eq 1 ]]; then
                NLTT=--nltt
            else
                NLTT=""
            fi
            netabc --num-threads 12 --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   $NLTT --net-type pa --trace {beast-abc} --seed {seed} {beast-subtree} {abc-config}
            echo "EOF" >> {beast-abc}

    raxml-abc:
        Extension: tsv
        Sleep: 600
        Walltime: 024:00:00
        Threads: 12
        Processes: 1
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 10000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
            m_min: [1, 2]
            m_max: 5
            N_max: 10000
            I_max: 10000
            alpha_min: 0
            alpha_max: 2
        Depends: lsd abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {raxml-abc}
            if [[ {nltt} -eq 1 ]]; then
                NLTT=--nltt
            else
                NLTT=""
            fi
            netabc --num-threads 36 --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   $NLTT --net-type pa --trace {raxml-abc} --seed {seed} {lsd} {abc-config}
            echo "EOF" >> {raxml-abc}

    abc:
        Extension: tsv
        Sleep: 600
        Walltime: 024:00:00
        Threads: 12
        Processes: 0
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 10000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
            m_min: [1, 2]
            m_max: 5
            N_max: 10000
            I_max: 10000
            alpha_min: 0
            alpha_max: 2
        Depends: subtree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {abc}
            if [[ {nltt} -eq 1 ]]; then
                NLTT=--nltt
            else
                NLTT=""
            fi
            netabc --num-threads 36 --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   $NLTT --net-type pa --trace {abc} --seed {seed} {subtree} {abc-config}
            echo "EOF" >> {abc}

    posterior-plot:
        Extension: pdf
        Walltime: 00:30:00
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 10000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
            m_min: [1, 2]
            m_max: 5
            N_max: 10000
            I_max: 10000
            alpha_min: 0
            alpha_max: 2
        Depends: abc subtree
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(grid))
        Rule: |
            ntip <- Ntip(read.tree("{subtree}"))
            d <- fread("{abc}")[iter == max(iter)]
            p <- posterior.plot.pa(d, alpha_min={alpha_min}, 
                    alpha_max={alpha_max}, I_min=ntip, I_max={I_max},
                    N_min=ntip, N_max={N_max}, m_min={m_min}, m_max={m_max},
                    show.map=FALSE, show.mean=TRUE)
            ggsave(p, file="{posterior-plot}", height=5, width=6)

    gamma:
        Extension: tsv
        Walltime: 00:30:00
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 10000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
            m_min: [1, 2]
            m_max: 5
            N_max: 10000
            I_max: 10000
            alpha_min: 0
            alpha_max: 2
        Depends: abc
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(Hmisc))
        Rule: |
            d <- fread("{abc}")[iter == max(iter)]
            alpha <- d[,wtd.mean(alpha, weight)]
            m <- d[,floor(wtd.mean(m, weight))]
            N <- d[,floor(wtd.mean(N, weight))]
            I <- d[,floor(wtd.mean(I, weight))]

            get.gamma <- function (i) {{
                g <- sample_pa(N, m=m, power=alpha, directed=FALSE)
                gamma.all <- coef(fit_power_law(degree(g), implementation="R.mle"))
                fit <- fit_power_law(degree(g))

                g.I <- sample_pa(I, m=m, power=alpha, directed=FALSE)
                gamma.all.I <- coef(fit_power_law(degree(g.I), implementation="R.mle"))
                fit.I <- fit_power_law(degree(g.I))

                data.table(gamma.all=gamma.all, xmin=fit$xmin, gamma.tail=fit$alpha, ks.p=fit$KS.p,
                           gamma.all.I=gamma.all.I, xmin.I=fit.I$xmin, gamma.tail.I=fit.I$alpha, ks.p.I=fit.I$KS.p)
            }}
            d <- rbindlist(lapply(1:100, get.gamma))
            cat("#{yaml}\n", file="{gamma}")
            write.tsv(d, file="{gamma}", append=TRUE)
