Name: gridsearch-pa-power
Description: Grid search for preferential attachment power
Processes: 1
Sleep: 5
Hostname: (hermes.*)|(litai.*.westgrid.ca)
Memory: 256m
Steps:
    train-network:
        Extension: gml.bz2
        Walltime: 00:00:30
        Parameters:
            nnode: 5000
            m: 2
            pa_power: "[i/100 for i in range(201)]"
            replicate: "range(10)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_pa({nnode}, power={pa_power}, m={m}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            f <- bzfile("{train-network}", "wb")
            write.graph(SIR.net(g), f, format="gml")
            close(f)

    train-tree:
        Extension: nwk.bz2
        Walltime: 00:00:30
        Parameters:
            m: 2
            pa_power: "[i/100 for i in range(201)]"
            replicate: "range(10)"
            nsimnode: 1000
            ntip: [500, 1000]
        Depends: train-network
        Interpreter: bash
        Rule: |
            NWKFILE=`echo {train-tree} | sed s/'.bz2'//`
            echo "#{yaml}" > $NWKFILE
            bzcat {train-network} | nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} >> $NWKFILE
            bzip2 $NWKFILE

    test-network:
        Extension: gml.bz2
        Walltime: 00:00:30
        Parameters:
            nnode: 5000
            m: 2
            true_pa_power: [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
            test_replicate: "range(10)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_pa({nnode}, power={true_pa_power}, m={m}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            f <- bzfile("{test-network}", "wb")
            write.graph(SIR.net(g), f, format="gml")
            close(f)

    test-tree:
        Extension: nwk.bz2
        Walltime: 00:00:30
        Parameters:
            m: 2
            true_pa_power: [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
            test_replicate: "range(10)"
            nsimnode: 1000
            ntip: [500, 1000]
        Depends: test-network
        Interpreter: bash
        Rule: |
            NWKFILE=`echo {test-tree} | sed s/'.bz2'//`
            echo "#{yaml}" > $NWKFILE
            bzcat {test-network} | nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} >> $NWKFILE
            bzip2 $NWKFILE

    kernel:
        Extension: tsv.bz2
        Sleep: 300
        Processes: 10
        Walltime: 01:00:00
        Parameters:
            ntip: [500, 1000]
            m: 2
            true_pa_power: [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
            test_replicate: "range(10)"
            decay_factor: 0.3
            rbf_variance: 5
            nltt: 0
        Depends: train-tree test-tree
        Interpreter: bash
        Rule: |
            TSVFILE=`echo {kernel} | sed s/'.bz2'//`
            echo "#{yaml}" > $TSVFILE
            if [[ {nltt} -eq 1 ]]; then
                NLTT="--nLTT"
            else
                NLTT=""
            fi
            for T in {train-tree}; do
                echo -n "$T"$'\t' >> $TSVFILE
                treekernel --ladderize --normalize --scale-branches mean \
                           --decay-factor {decay_factor} \
                           --gauss-factor {rbf_variance} \
                           $NLTT <(bzcat {test-tree}) <(bzcat $T) >> $TSVFILE
            done
            bzip2 $TSVFILE

    kernel-plot:
        Extension: pdf
        Walltime: 00:10:00
        Parameters:
            m: 2
        Depends: kernel train-tree
        Interpreter: R --quiet --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- setDT(collect.data(strsplit("{kernel}", " ")[[1]], header=FALSE))
            setnames(d, c("V1", "V2"), c("tree", "score"))
            
            m <- collect.metadata(strsplit("{train-tree}", " ")[[1]])
            m$tree <- rownames(m)
            setDT(m)
            d <- merge(d, m, by=c("tree", "m", "ntip"))
            d[,ntip := as.factor(ntip)]

            d[,label := paste("true alpha", true_pa_power)]
            g <- ggplot(d, aes(x=pa_power, y=score, color=factor(ntip))) + stat_smooth() +
                facet_wrap(~label) +
                geom_vline(aes(xintercept=true_pa_power)) + ylim(0.9, 1) +
                scale_color_discrete(name="number of tips") +
                labs(x=expression(paste("simulated ", alpha)), y="kernel score") +
                theme_bw()
            facet_wrap_labeller(g, expression(paste("true", alpha, d[,sort(unique(true_pa_power))])))
            ggsave("{kernel-plot}")

    error-plot:
        Extension: pdf
        Walltime: 00:02:00
        Parameters:
            m: 2
            ntip: [500, 1000]
        Depends: kernel test-tree train-tree
        Interpreter: R --quiet --vanilla
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(data.table))
            suppressPackageStartupMessages(library(reshape2))
        Rule: |
            # collect all kernel scores
            files <- strsplit("{kernel}", " ")[[1]]
            d <- collect.data(files, header=FALSE, col.names=c("tree", "score"))

            # combine with metadata from train and test trees
            test.cols <- c("test_replicate", "true_pa_power")
            d <- merge(d, collect.metadata(strsplit("{train-tree}", " ")[[1]]), by.x="tree", by.y=0)
            d <- merge(d, collect.metadata(strsplit("{test-tree}", " ")[[1]]), by=test.cols)
            setDT(d)

            # choose point estimate with highest median kernel score
            d[,agg := median(score), by=c(test.cols, "pa_power")]

            # compute absolute and relative errors
            plot.data <- d[,abs(true_pa_power - pa_power[which.max(agg)]), by=test.cols]
            plot.data <- setNames(plot.data, c(test.cols, "absolute"))
            plot.data <- plot.data[,relative := absolute / true_pa_power]
            plot.data <- melt(plot.data, id.vars=test.cols, variable.name="error.type", value.name="error")
            plot.data <- plot.data[,true_pa_power := as.factor(true_pa_power)]

            # plot
            ggplot(plot.data, aes(x=true_pa_power, y=error, group=true_pa_power)) + 
                geom_boxplot() + ggtitle("ntip = {ntip}") +
                facet_wrap(~error.type, scales="free") + theme_bw()
            ggsave("{error-plot}")
