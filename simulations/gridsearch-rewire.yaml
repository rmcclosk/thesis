Name: gridsearch-rewire
Description: Grid search for small world rewiring probability
Processes: 20
Steps:
    train-network:
        Extension: gml
        Parameters:
            nnode: 5000
            nbhd_size: 2
            rewire_prob: "[i/1000 for i in range(101)]"
            replicate: "range(10)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_smallworld(1, {nnode}, {nbhd_size}, {rewire_prob})
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{train-network}", format="gml")

    train-tree:
        Extension: nwk
        Parameters:
            rewire_prob: "[i/1000 for i in range(101)]"
            replicate: "range(10)"
            nsimnode: 1000
            ntip: 1000
        Depends: train-network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {train-tree}                                                 
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} {train-network} >> {train-tree}

    test-network:
        Extension: gml
        Parameters:
            nnode: 5000
            nbhd_size: 2
            true_rewire_prob: [0.01, 0.05, 0.09]
            test_replicate: "range(10)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            g <- sample_smallworld(1, {nnode}, {nbhd_size}, {true_rewire_prob})
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{test-network}", format="gml")

    test-tree:
        Extension: nwk
        Parameters:
            true_rewire_prob: [0.01, 0.05, 0.09]
            test_replicate: "range(10)"
            nsimnode: 1000
            ntip: 1000
        Depends: test-network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {test-tree}                                                 
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} {test-network} >> {test-tree}

    kernel:
        Extension: tsv
        Parameters:
            true_rewire_prob: [0.01, 0.05, 0.09]
            test_replicate: "range(10)"
            decay_factor: 0.3
            rbf_variance: 5
        Depends: train-tree test-tree
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {kernel}
            for T in {train-tree}; do
                echo -n "$T"$'\t' >> {kernel}
                treekernel --ladderize --normalize --scale-branches mean \
                           --decay-factor {decay_factor} \
                           --gauss-factor {rbf_variance} \
                           {test-tree} $T >> {kernel}
            done

    kernel-plot:
        Extension: pdf
        Parameters:
            true_rewire_prob: [0.01, 0.05, 0.09]
            test_replicate: "range(10)"
        Depends: kernel train-tree
        Interpreter: R --quiet --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            k <- read.table("{kernel}", row.names=1, col.names=c("", "score"))
            k <- merge(k, collect.metadata(strsplit("{train-tree}", " ")[[1]]), by=0)
            best <- with(k, k[score > quantile(score, 0.95), "rewire_prob"])
            ggplot(k, aes(x=rewire_prob, y=score)) + geom_smooth() +
                geom_vline(xintercept=range(best), col="red") +
                geom_vline(xintercept={true_rewire_prob}, linetype=2) +
                theme_bw()
            ggsave("{kernel-plot}")

    error-plot:
        Extension: pdf
        Parameters:
            placeholder: 0
        Depends: kernel test-tree train-tree
        Interpreter: R --quiet --vanilla
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(data.table))
            suppressPackageStartupMessages(library(reshape2))
        Rule: |
            # collect all kernel scores
            files <- strsplit("{kernel}", " ")[[1]]
            d <- collect.data(files, header=FALSE, col.names=c("tree", "score"))

            # combine with metadata from train and test trees
            mtrain <- collect.metadata(strsplit("{train-tree}", " ")[[1]])
            d <- merge(d, mtrain, by.x="tree", by.y=0)
            mtest <- collect.metadata(strsplit("{test-tree}", " ")[[1]])
            test.cols <- c("test_replicate", "true_rewire_prob")
            d <- setDT(merge(d, mtest, by=test.cols))

            # choose point estimate with highest median kernel score
            d[,median := median(score), by=c(test.cols, "rewire_prob")]

            # compute absolute and relative errors
            plot.data <- d[,abs(true_rewire_prob - rewire_prob[which.max(median)]), by=test.cols]
            plot.data <- setNames(plot.data, c(test.cols, "absolute"))
            plot.data <- plot.data[,relative := absolute / true_rewire_prob]
            plot.data <- melt(plot.data, id.vars=test.cols, variable.name="error.type", value.name="error")

            # plot it out
            ggplot(plot.data, aes(x=true_rewire_prob, y=error, group=true_rewire_prob)) + 
                geom_boxplot() + geom_point(position=position_jitter(width=0.01)) + 
                facet_wrap(~error.type, scales="free") + theme_bw()
            ggsave("{error-plot}")
