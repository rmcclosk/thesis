Name: kernel-mean-degree
Processes: 1
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            mean_degree: [2, 4, 8, 16]
            seed: !!python/object/apply:__builtin__.xrange [0, 100, 1]
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(igraph))
        Rule: | 
            set.seed({seed} * {mean_degree})
            g <- barabasi.game({nnode}, m={mean_degree}/2, directed=F)
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SI.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            nnode: 5000
            mean_degree: [2, 4, 8, 16]
            nsimnode: 1000
            ntip: 100
            seed: !!python/object/apply:__builtin__.xrange [0, 100, 1]
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed `echo {seed}*{mean_degree} | bc` {network} >> {tree}

    statistics:
        Extension: tsv
        Parameters:
            placeholder: 0
        Depends: tree
        Interpreter: bash
        Rule: |
            echo -e "colless\til.portion\tmax.ladder\tdepth\tbmi\tdelta.w\twidth\tcherries\tprop.unbalanced\tavg.unbalance\tsackin\tcophenetic\tgamma" > {statistics}
            for T in {tree}; do
                echo -n `treestat -i -y -s colless $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s il $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s ladder $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s height $T`$'\t' >> {statistics}
                echo -n `treestat -i -s bmi $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s max-delta-width $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s width $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s cherries $T`$'\t' >> {statistics}
                echo -n `treestat -i -s prop-unbalanced $T`$'\t' >> {statistics}
                echo -n `treestat -i -s unbalance $T`$'\t' >> {statistics}
                echo -n `treestat -i -y -s sackin $T`$'\t' >> {statistics}
                echo -n `treestat -i -y -s cophenetic $T`$'\t' >> {statistics}
                echo `treestat -i -s gamma $T` >> {statistics}
            done

    stats-plot:
        Extension: pdf
        Parameters:
            placeholder: 0
        Depends: statistics tree
        Interpreter: R --vanilla --silent
        Startup: |
            library(netabc)
            library(reshape2)
        Rule: |
            m <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"mean_degree"]
            d <- read.table("{statistics}", header=TRUE)
            d <- cbind(mean.degree=as.factor(m), d)
            d <- melt(d, id.vars="mean.degree")
            ggplot(d, aes(x=mean.degree, y=value)) + geom_violin() + facet_wrap(~variable, scales="free") + theme_bw()
            ggsave("{stats-plot}")
