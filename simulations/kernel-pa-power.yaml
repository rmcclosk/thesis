Name: kernel-pa-power
Description: Testing if the tree kernel can recover the preferential attachment power in a Barabasi-Albert graph
Processes: 1
Sleep: 5
Hostname: (hermes.*)|(litai.*.westgrid.ca)
Steps:
    network:
        Extension: gml.bz2
        Walltime: 00:00:30
        Parameters:
            nnode: 5000
            mean_degree: [4, 20]
            pa_power: [0.5, 1.0, 1.5]
            replicate: "range(100)"
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            f <- bzfile("{network}", "wb")
            set.seed({seed})
            g <- sample_pa({nnode}, m={mean_degree}/2, power={pa_power}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SIR.net(g), f, format="gml")
            close(f)

    tree:
        Extension: nwk.bz2
        Walltime: 00:00:30
        Parameters:
            mean_degree: [4, 20]
            pa_power: [0.5, 1.0, 1.5]
            replicate: "range(100)"
            nsimnode: [500, 1000, 2000]
            ntip: [100, 500, 1000]
        Exclusions:
            -
                nsimnode: 500
                ntip: 1000
        Depends: network
        Interpreter: bash
        Rule: |
            NWKFILE=`echo {tree} | sed s/'.bz2'//`
            echo "#{yaml}" > $NWKFILE
            bzcat {network} | nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} >> $NWKFILE
            bzip2 $NWKFILE

    tree-plot:
        Extension: pdf
        Walltime: 00:00:30
        Parameters:
            mean_degree: 4
            replicate: 0
            nsimnode: 1000
            ntip: 500
        Depends: tree
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(extrafont))
        Rule: |
            tree.files <- strsplit("{tree}", " ")[[1]]
            t <- lapply(tree.files, read.tree)
            t <- lapply(t, ladderize)
            y <- collect.metadata(tree.files)$pa_power
            t <- t[order(y)]
            y <- y[order(y)]

            pdf("{tree-plot}", family="Gillius ADF", height=4)
            par(mar=c(0, 0, 4, 0) + 0.1, mfrow=c(1, 3), oma=c(0, 0, 2, 0) + 0.1)
            lapply(1:length(t), function (i) {{
                plot(t[[i]], show.tip.label=FALSE, main=paste("attachment power", y[i]))
            }})
            dev.off()

    statistics:
        Extension: tsv
        Walltime: 00:10:00
        Sleep: 60
        Parameters:
            mean_degree: [4, 20]
            nsimnode: [500, 1000, 2000]
            ntip: [100, 500, 1000]
        Depends: tree
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {statistics}
            echo -e "\tcolless\til.portion\tmax.ladder\tbmi\tdelta.w\twidth\tcherries\tprop.unbalanced\tavg.unbalance\tsackin\tcophenetic\tgamma" >> {statistics}
            for T in {tree}; do
                echo -n $T$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -y -s colless`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -n -s il`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -n -s ladder`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -s bmi`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -n -s max-delta-width`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -n -s width`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -n -s cherries`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -s prop-unbalanced`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -s unbalance`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -y -s sackin`$'\t' >> {statistics}
                echo -n `bzcat $T | treestat -i -y -s cophenetic`$'\t' >> {statistics}
                echo `bzcat $T | treestat -i -s gamma` >> {statistics}
            done

    stats-plot:
        Extension: pdf
        Walltime: 00:10:00
        Parameters:
            statistic: "sackin"
        Depends: statistics tree
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(extrafont))
        Rule: |
            d <- collect.data(strsplit("{statistics}", " ")[[1]])
            m <- collect.metadata(strsplit("{tree}", " ")[[1]])
            d <- setDT(merge(d, m, by=0))
            d[,pa_power := as.factor(pa_power)]
            setnames(d, c("ntip.x", "nsimnode.x"), c("sampled", "infected"))
            ylab <- switch("{statistic}", sackin="Sackin's index")
            ggplot(d, aes(x=pa_power, y={statistic})) + geom_violin() +
                facet_grid(sampled~infected, labeller="label_both") + theme_bw() +
                labs(x="attachment power", y=ylab) +
                theme(text=element_text(family="Gillius ADF"))
            ggsave("{stats-plot}")

    stats-classifier:
        Extension: tsv.bz2
        Walltime: 00:20:00
        Sleep: 60
        Processes: 12
        Parameters:
            mean_degree: [4, 20]
            nsimnode: [500, 1000, 2000]
            ntip: [100, 500, 1000]
            statistic: "sackin"
        Depends: statistics tree
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            x <- fread("{statistics}")[,sackin]
            y <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"pa_power"]
            results <- lm.cv(x, y, n.cv=1000, stats=c("rsquared"))
            f <- bzfile("{stats-classifier}", "wb")
            cat("#{yaml}\n", file=f)
            write.tsv(results, f, append=TRUE)
            close(f)

    kernel-matrix:
        Extension: mtx.bz2
        Sleep: 300
        Processes: 12
        Walltime: 04:00:00
        Memory: 256m
        Parameters:
            mean_degree: [4, 20]
            nsimnode: [500, 1000, 2000]
            ntip: [100, 500, 1000]
            decay_factor: [0.2, 0.3, 0.4]
            rbf_variance: [0.125, 0.25, 0.5, 1, 2, 4, 8]
            nltt: ["yes", "no"]
        Depends: tree
        Interpreter: bash
        Rule: |
            MTXFILE=`echo "{kernel-matrix}" | sed s/'.bz2'//`
            if [[ "{nltt}" == "yes" ]]; then
                NLTT="--nLTT"
            else
                NLTT=""
            fi
            echo "%%MatrixMarket matrix array real symmetric" > $MTXFILE
            echo "%{yaml}" >> $MTXFILE
            echo "{$#} {$#}" >> $MTXFILE
            for T1 in {tree}; do
                for T2 in {tree}; do
                    if [[ "$T1" < "$T2" || "$T1" == "$T2" ]]; then
                        treekernel --ladderize --decay-factor {decay_factor} \
                                   --gauss-factor {rbf_variance} \
                                   --scale-branches mean $NLTT \
                                   <(bzcat $T1) <(bzcat $T2) >> $MTXFILE
                    fi
                done
            done
            bzip2 $MTXFILE

    kpca:
        Extension: tsv
        Walltime: 00:01:00
        Parameters:
            mean_degree: [4, 20]
            nsimnode: [500, 1000, 2000]
            ntip: [100, 500, 1000]
            decay_factor: 0.3
            rbf_variance: 4
            nltt: "no"
        Depends: kernel-matrix tree
        Interpreter: R --vanilla --silent
        Startup: library(netabc)
        Rule: |
            k <- as.kernelMatrix(read.mm("{kernel-matrix}"))
            y <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"pa_power"]
            pc <- as.data.frame(rotated(kpca(k, features=2)))
            colnames(pc) <- c("PC1", "PC2")
            pc <- cbind(pc, pa.power=y)
            cat("#{yaml}\n", file="{kpca}")
            write.tsv(pc, "{kpca}", append=TRUE)

    kpca-plot:
        Extension: pdf
        Walltime: 00:01:00
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: "no"
            mean_degree: 4
        Depends: kpca
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(extrafont))
            suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- setDT(collect.data(strsplit("{kpca}", " ")[[1]]))
            setnames(d, c("ntip", "nsimnode"), c("sampled", "infected"))
            d[,pa.power := as.factor(pa.power)]
            ggplot(d, aes(x=PC1, y=PC2, color=pa.power)) + geom_point() +
                facet_grid(sampled~infected, scales="free", labeller="label_both") +
                labs(x="first principal component", y="second principal component") +
                theme_bw() +
                theme(text=element_text(family="Gillius ADF"),
                      axis.ticks=element_blank(),
                      axis.text=element_blank()) +
                scale_color_discrete(name=expression(alpha))
            ggsave("{kpca-plot}")

    classifier:
        Extension: tsv.bz2
        Walltime: 00:20:00
        Sleep: 60
        Processes: 12
        Parameters:
            mean_degree: [4, 20]
            nsimnode: [500, 1000, 2000]
            ntip: [100, 500, 1000]
            decay_factor: [0.2, 0.3, 0.4]
            rbf_variance: [0.125, 0.25, 0.5, 1, 2, 4, 8]
            nltt: ["yes", "no"]
        Depends: kernel-matrix tree
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            k <- read.mm("{kernel-matrix}")
            y <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"pa_power"]
            results <- tryCatch({{ksvm.cv(k, y, n.cv=1000, stats=c("rsquared"))}},
                error = function (e) {{data.frame(rsquared = rep(0, 1000))}})
            f <- bzfile("{classifier}", "wb")
            cat("#{yaml}\n", file=f)
            write.tsv(results, f, append=TRUE)
            close(f)

    crossv-plot:
        Extension: pdf
        Walltime: 00:01:00
        Parameters:
            mean_degree: 4
        Depends: classifier stats-classifier
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(extrafont))
        Rule: |
            d <- setDT(collect.data(strsplit("{classifier}", " ")[[1]]))
            d2 <- setDT(collect.data(strsplit("{stats-classifier}", " ")[[1]]))
            by.cols <- c("nsimnode", "ntip", "decay_factor", "rbf_variance", "nltt")
            d <- setnames(d[,mean(rsquared), by=by.cols], "V1", "rsquared")
            d2 <- setnames(d2[,mean(rsquared), by=c("ntip", "nsimnode")], "V1", "rsquared")
            setnames(d, c("ntip", "nsimnode"), c("sampled", "infected"))
            setnames(d2, c("ntip", "nsimnode"), c("sampled", "infected"))
            d[,decay_factor := as.factor(decay_factor)]
            d[,rbf_variance := as.factor(rbf_variance)]
            d[,interaction := paste0(decay_factor, nltt)]
            plot.aes <- aes(x=rbf_variance, y=rsquared, color=decay_factor,
                            shape=decay_factor, linetype=nltt, group=interaction)
            ggplot(d) +
                geom_point(size=3, plot.aes) + geom_line(plot.aes) +
                geom_point(data=d2, aes(y=rsquared), x=4, size=3, color="black", shape=4) +
                theme_bw() +
                facet_grid(sampled~infected, labeller="label_both") +
                labs(x="radial basis function variance", y=expression(R^2)) +
                scale_color_discrete(name="decay factor") +
                scale_shape_discrete(name="decay factor") +
                scale_linetype_discrete(name="nLTT") +
                theme(text=element_text(family="Gillius ADF"),
                      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
            ggsave("{crossv-plot}")

    kernel-parameters:
        Extension: tsv
        Walltime: 00:01:00
        Parameters:
            placeholder: 0
        Depends: classifier
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- setDT(collect.data(strsplit("{classifier}", " ")[[1]]))
            by.cols <- tail(colnames(d, -1), -1)
            d <- d[,mean(rsquared), by=by.cols]
            d <- d[,.SD[which.max(V1),], by=c("nsimnode", "ntip", "mean_degree")]
            setnames(d, "V1", "rsquared")
            write.tsv(d, "{kernel-parameters}")
