Name: kernel-pa-power
Description: Testing if the tree kernel can recover the preferential attachment power in a Barabasi-Albert graph
Processes: 1
Sleep: 5
Steps:
    network:
        Extension: gml.bz2
        Parameters:
            nnode: 5000
            mean_degree: 4
            pa_power: [0.0, 0.5, 1.0]
            replicate: "range(100)"
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
        Rule: | 
            f <- bzfile("{network}", "wb")
            set.seed({seed})
            g <- sample_pa({nnode}, m={mean_degree}/2, power={pa_power}, directed=FALSE)
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(SIR.net(g), f, format="gml")
            close(f)

    tree:
        Extension: nwk
        Parameters:
            pa_power: [0.0, 0.5, 1.0]
            replicate: "range(100)"
            nsimnode: 1000
            ntip: [100, 500, 1000]
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}                                                 
            bzcat {network} | nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} >> {tree}

    tree-plot:
        Extension: pdf
        Parameters:
            pa_power: [0.0, 0.5, 1.0]
            replicate: [0, 1, 2]
            ntip: [100, 500, 1000]
        Depends: tree
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            t <- ladderize(read.tree("{tree}"))
            pdf("{tree-plot}")
            par(mar=c(0, 0, 4, 0) + 0.1)
            plot(t, show.tip.label=FALSE) 
            title(paste(strwrap(as.yaml(yaml.load("{yaml}")), 60), collapse="\n"))
            dev.off()

    statistics:
        Sleep: 60
        Extension: tsv
        Parameters:
            ntip: [100, 500, 1000]
        Depends: tree
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {statistics}
            echo -e "\tcolless\til.portion\tmax.ladder\tbmi\tdelta.w\twidth\tcherries\tprop.unbalanced\tavg.unbalance\tsackin\tcophenetic\tgamma" >> {statistics}
            for T in {tree}; do
                echo -n $T$'\t' >> {statistics}
                echo -n `treestat -i -y -s colless $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s il $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s ladder $T`$'\t' >> {statistics}
                echo -n `treestat -i -s bmi $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s max-delta-width $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s width $T`$'\t' >> {statistics}
                echo -n `treestat -i -n -s cherries $T`$'\t' >> {statistics}
                echo -n `treestat -i -s prop-unbalanced $T`$'\t' >> {statistics}
                echo -n `treestat -i -s unbalance $T`$'\t' >> {statistics}
                echo -n `treestat -i -y -s sackin $T`$'\t' >> {statistics}
                echo -n `treestat -i -y -s cophenetic $T`$'\t' >> {statistics}
                echo `treestat -i -s gamma $T` >> {statistics}
            done

    stats-plot:
        Extension: pdf
        Parameters:
            ntip: [100, 500, 1000]
        Depends: statistics tree
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(reshape2))
        Rule: |
            m <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"pa_power", drop=FALSE]
            m$pa_power <- as.factor(m$pa_power)
            d <- read.table("{statistics}", header=TRUE)
            d <- merge(m, d, by="row.names")
            d[,"Row.names"] <- NULL
            d <- melt(d, id.vars="pa_power")
            ggplot(d, aes(x=pa_power, y=value)) + geom_violin() + 
                facet_wrap(~variable, scales="free") + theme_bw() + 
                ggtitle(as.yaml(yaml.load("{yaml}")))
            ggsave("{stats-plot}")

    kernel-matrix:
        Sleep: 300
        Processes: 12
        Extension: mtx
        Walltime: 04:00:00
        Parameters:
            ntip: [100, 500, 1000]
            mean_degree: 4
            decay_factor: [0.2, 0.3, 0.4]
            rbf_variance: [0.125, 0.25, 0.5, 1, 2, 5, 10, 20]
            nltt: ["yes", "no"]
        Exclusions:
            -
                ntip: 1000
                rbf_variance: [0.125, 0.25, 0.5]
            -
                ntip: [100, 500]
                rbf_variance: 20
        Depends: tree
        Interpreter: bash
        Rule: |
            if [[ "{nltt}" == "yes" ]]; then
                NLTT="--nLTT"
            else
                NLTT=""
            fi
            echo "%%MatrixMarket matrix array real symmetric" > {kernel-matrix}
            echo "%{yaml}" >> {kernel-matrix}
            echo "{$#} {$#}" >> {kernel-matrix}
            for T1 in {tree}; do
                for T2 in {tree}; d
                    if [[ "$T1" < "$T2" || "$T1" == "$T2" ]]; then
                        treekernel --ladderize --decay-factor {decay_factor} \
                                   --gauss-factor {rbf_variance} \
                                   --scale-branches mean --nLTT \
                                   $T1 $T2 >> {kernel-matrix}
                    fi
                done
            done

    kpca-plot:
        Extension: pdf
        Parameters:
            ntip: [100, 500, 1000]
            decay_factor: [0.2, 0.3, 0.4]
            rbf_variance: [0.125, 0.25, 0.5, 1, 2, 5, 10, 20]
            nltt: ["yes", "no"]
        Depends: kernel-matrix tree
        Interpreter: R --vanilla --silent
        Startup: library(netabc)
        Rule: |
            k <- read.mm("{kernel-matrix}")
            y <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"pa_power"]
            kpca.plot(k, color=list(mean.degree=y), yaml="{yaml}")
            ggsave("{kpca-plot}")

    classifier:
        Sleep: 60
        Processes: 12
        Extension: tsv
        Walltime: 00:30:00
        Parameters:
            ntip: [100, 500, 1000]
            decay_factor: [0.2, 0.3, 0.4]
            rbf_variance: [0.125, 0.25, 0.5, 1, 2, 5, 10, 20]
            nltt: ["yes", "no"]
        Depends: kernel-matrix tree
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            k <- read.mm("{kernel-matrix}")
            y <- collect.metadata(strsplit("{tree}", " ")[[1]])[,"pa_power"]
            results <- ksvm.cv(k, y, n.cv=1000, stats=c("rsquared"))
            cat("#{yaml}\n", file="{classifier}")
            write.tsv(results, "{classifier}", append=TRUE)

    crossv-plot:
        Extension: pdf
        Parameters:
            ntip: [100, 500, 1000]
        Depends: classifier 
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- collect.data(strsplit("{classifier}", " ")[[1]])
            summarize.plot(d, x="rbf_variance", y="rsquared", group="decay_factor", 
                           facet.y="nltt", fun="mean", yaml="{yaml}")
            ggsave("{crossv-plot}", width=10)
