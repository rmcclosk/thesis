Name: leventhal2012-fig1
Description: Recreating figure 1A from Leventhal et al. 2012
Processes: 1
Steps:
    network:
        Extension: gml.bz2
        Parameters:
            nnode: 5000
            mean_degree: 8
            net_type: ["BA", "ER", "WS", "FG"]
            ws_prob: 0.01
            transmissibility: "[i/20 for i in range(1, 20)]"
            replicate: "range(100)"
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(igraph))
        Rule: | 
            set.seed({seed})
            if ("{net_type}" == "BA") {{
                g <- sample_pa({nnode}, m={mean_degree}/2, directed=F)
            }} else if ("{net_type}" == "WS") {{
                g <- sample_smallworld(1, {nnode}, {mean_degree}/2, {ws_prob})
            }} else if ("{net_type}" == "ER") {{
                g <- sample_gnp({nnode}, {mean_degree}/{nnode})
            }} else if ("{net_type}" == "FG") {{
                g <- make_full_graph({nnode}, directed=FALSE)
            }}
            graph_attr(g, "comment") <- "{yaml}"
            f <- bzfile("{network}", open="wb")
            write.graph(SIR.net(g, transmit.rate=1, remove.rate=(1-{transmissibility})/{transmissibility}), f, format="gml")
            close(f)

    tree:
        Extension: nwk
        Parameters:
            nnode: 5000
            mean_degree: 8
            net_type: ["BA", "ER", "WS"]
            ws_prob: 0.01
            transmissibility: "[i/20 for i in range(1, 20)]"
            replicate: "range(100)"
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            bzcat {network} | nettree --seed {seed} >> {tree}

    sackin:
        Extension: tsv
        Parameters:
            placeholder: 0
        Depends: tree
        Interpreter: bash
        Rule: |
            echo -e "\tsackin" > {sackin}
            for T in {tree}; do
                echo $T$'\t'`treestat -i -s sackin $T` >> {sackin}
            done

    sackin-plot:
        Extension: pdf
        Parameters:
            placeholder: 0
        Depends: tree sackin
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- read.table("{sackin}", row.names=1, header=TRUE)
            d <- merge(d, collect.metadata(strsplit("{tree}", " ")[[1]]), by=0)
            q25 <- function (x) quantile(x, 0.25)
            q75 <- function (x) quantile(x, 0.75)
            ggplot(d, aes(x=transmissibility, y=sackin, fill=net_type)) +
                stat_summary(fun.ymin=q25, fun.ymax=q75, geom='ribbon', alpha=0.5) +
                stat_summary(fun.y=median, geom='line', aes(color=net_type)) +
                theme(legend.position=c(1, 0), legend.justification=c(0, 1)) +
                theme_bw() +
                scale_fill_discrete(name="network type") +
                scale_color_discrete(name="network type") +
                labs(y="Sackin's index") +
                theme(text=element_text(size=14, family="Gillius ADF"))
            ggsave("{sackin-plot}", width=5, height=4)
