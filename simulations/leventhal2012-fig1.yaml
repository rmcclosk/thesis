Name: leventhal2012-fig1
Description: Recreating figure 1A from Leventhal et al. 2012
Processes: 1
Steps:
    sackin:
        Extension: tsv
        Parameters:
            N: 5000
            mean_degree: 8
            ws_prob: 0.01
            steps: [20, 50]
            replicates: 1000
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(ape))
            suppressPackageStartupMessages(library(apTreeshape))
        Rule: |
            set.seed({seed})

            make.net <- function (net.type, T) {{
                if (net.type == "BA") {{
                    g <- sample_pa({N}, m={mean_degree}/2, directed=F)
                }} else if (net.type == "WS") {{
                    g <- sample_smallworld(1, {N}, {mean_degree}/2, {ws_prob}/2)
                }} else if (net.type == "ER") {{
                    g <- sample_gnp({N}, {mean_degree}/{N})
                }} 
                SIR.net(g, transmit.rate=1, remove.rate=(1-T)/T)
            }}
            
            net.types <- c("BA", "WS", "ER")
            T.values <- seq(0, 1, length.out={steps})[2:({steps}-1)]

            pb <- txtProgressBar(0, 3*{replicates}*{steps}, style=3)
            d <- rbindlist(lapply(net.types, function (nt) {{
                rbindlist(lapply(T.values, function (T) {{
                    rbindlist(mclapply(1:{replicates}, function (i) {{
                        tmpg <- tempfile()
                        tmpt <- tempfile()
                        s <- tryCatch({{
                            g <- make.net(nt, T)
                            write.graph(g, tmpg, "gml")
                            system(paste("nettree <", tmpg, ">", tmpt))
                            t <- read.tree(tmpt)
                            sackin(as.treeshape(t))
                        }}, error = function (e) 0)
                        unlink(c(tmpg, tmpt))
                        setTxtProgressBar(pb, getTxtProgressBar(pb)+1)
                        data.table(net.type=nt, transmissibility=T, sackin=s)
                    }}, mc.cores=8))
                }}))
            }}))

            close(pb)
            cat("#{yaml}\n", file="{sackin}")
            write.tsv(d, file="{sackin}", append=TRUE)

    sackin-plot:
        Extension: pdf
        Parameters:
            N: 5000
            mean_degree: 8
            ws_prob: 0.01
            steps: 50
            replicates: 1000
        Depends: sackin
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            d <- fread("{sackin}")
            q25 <- function (x) quantile(x, 0.25)
            q75 <- function (x) quantile(x, 0.75)
            q025 <- function (x) quantile(x, 0.025)
            q975 <- function (x) quantile(x, 0.975)
            ggplot(d, aes(x=transmissibility, y=sackin, fill=net.type)) +
                stat_summary(fun.ymin=q025, fun.ymax=q975, geom='ribbon', alpha=0.25) +
                stat_summary(fun.ymin=q25, fun.ymax=q75, geom='ribbon', alpha=0.5) +
                stat_summary(fun.y=median, geom='line', aes(color=net.type)) +
                theme(legend.position=c(1, 0), legend.justification=c(0, 1)) +
                theme_bw() +
                scale_fill_discrete(name="network type") +
                scale_color_discrete(name="network type") +
                labs(y="Sackin's index") +
                ylim(c(0, 6e5)) +
                theme(text=element_text(size=14))
            ggsave("{sackin-plot}", width=5, height=4)
