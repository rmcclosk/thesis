Name: novitsky2014
Description: ABC on Novitsky et al. 2013/2014
Processes: 1
Sleep: 5
Memory: 256m
Steps:
    raw-fasta:
        Extension: fasta
        Parameters:
            pmid: 25275430
        Interpreter: python3
        Startup: |
            from Bio import Entrez
            from datetime import datetime
        Rule: |
            Entrez.email = "rmccloskey@cfenet.ubc.ca"
            epoch = datetime.strptime("01-Jan-1970", "%d-%b-%Y")

            # find all Genbank IDs for this study
            id = "{pmid},24349005"
            handle = Entrez.elink(dbfrom="pubmed", id=id, linkname="pubmed_nuccore")
            record = Entrez.read(handle)
            handle.close()
            gbids = ",".join([x["Id"] for x in record[0]["LinkSetDb"][0]["Link"]])

            # fetch all Genbank records
            handle = Entrez.efetch(db="nuccore", id=gbids, rettype="gb", retmode="xml")
            headers = []
            seqs = []
            for record in Entrez.parse(handle):
                for qual in record["GBSeq_feature-table"][0]["GBFeature_quals"]:
                    header = None
                    if qual["GBQualifier_name"] == "collection_date":
                        date = datetime.strptime(qual["GBQualifier_value"], "%d-%b-%Y")
                        header = "{{}}_{{}}".format(record["GBSeq_locus"], (date - epoch).days)
                        break
                if header is not None:
                    headers.append(header)
                    seqs.append(record["GBSeq_sequence"])

            # write to FASTA file
            with open("{raw-fasta}", "w") as f:
                for header, seq in zip(headers, seqs):
                    f.write(">{{}}\n{{}}\n".format(header, seq))

    hxb2:
        Extension: fasta
        Interpreter: python3
        Parameters:
            placeholder: 0
        Startup: |
            from Bio import Entrez
            Entrez.email = "rmccloskey@cfenet.ubc.ca"
        Rule: |
            handle = Entrez.efetch("nuccore", id="1906382", rettype="fasta", retmode="text")
            with open("{hxb2}", "w") as f:
                for line in handle:
                    if len(line) > 1:
                        f.write(line)

    clip-hvr:
        Extension: fasta
        Parameters:
            placeholder: 0
        Depends: raw-fasta hxb2
        Interpreter: python3
        Startup: |
            from Bio import SeqIO
            import subprocess
            import tempfile
            import io
            import os
        Rule: |
            hxb2 = SeqIO.read("{hxb2}", "fasta")
            hvr = [ [132, 152], [185, 190], [396, 410], [460, 465] ]
            for i, interval in enumerate(hvr):
                start, end = interval
                hvr[i] = [6225 + (start - 1) * 3, 6225 + end * 3 - 1]
            hvr.reverse()

            outfile = open("{clip-hvr}", "w")
            for query in SeqIO.parse("{raw-fasta}", "fasta"):
                with tempfile.NamedTemporaryFile("w") as f:
                    SeqIO.write(query, f, "fasta")
                    SeqIO.write(hxb2, f, "fasta")
                    f.flush()
                    align = subprocess.Popen(["mafft", "--auto", "--quiet", f.name], stdout=subprocess.PIPE, universal_newlines=True).communicate()[0]
                query, ref = list(SeqIO.parse(io.StringIO(align), "fasta"))
                ref_pos = 0
                ref_map = {{}}
                for i in range(len(ref)):
                    if ref[i] != "-":
                        ref_pos += 1
                        ref_map[ref_pos] = i
               
                for start, end in hvr:
                    query = query[:ref_map[start]] + query[ref_map[end]+1:]
                SeqIO.write(query, outfile, "fasta")
                outfile.flush()
            outfile.close()

    align:
        Extension: fasta
        Parameters:
            placeholder: 0
        Depends: clip-hvr
        Interpreter: bash
        Rule: |
            TMP=`mktemp`
            muscle -maxiters 1 -diags1 -in {clip-hvr} -out $TMP
            trimal -in $TMP -automated1 | filter_duplicates > {align}
            rm $TMP

    tree:
        Extension: nwk
        Parameters:
            placeholder: 0
        Depends: align
        Interpreter: bash
        Rule: |
            UNROOTED=`mktemp`
            ROOTED=`mktemp`
            RTTJAR=`locate RLRootToTip.jar | head -n 1`
            fasttreeMP -nt -gtr -quiet -nosupport < {align} | nw_reroot - > $UNROOTED
            java -jar $RTTJAR -writetree $ROOTED -newick $UNROOTED
            python3 -c "from Bio import Phylo; Phylo.convert('$ROOTED', 'nexus', '{tree}', 'newick')"
            rm $ROOTED $UNROOTED

    cluster:
        Extension: tsv
        Parameters:
            target: 200
        Depends: tree
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            t <- read.tree("{tree}")
            st <- subtrees(t)
            st <- st[[which.min(abs(sapply(st, Nnode) - {target}))]]
            cl.nodes <- st$tip.label
            write.table(cl.nodes, "{cluster}", col.names=F, row.names=F, quote=F)

    subtree:
        Extension: nwk
        Parameters:
            cutoff: 0.14
        Depends: cluster align
        Interpreter: bash
        Rule: |
            SUBSET=`mktemp`
            UNROOTED=`mktemp`
            ROOTED=`mktemp`
            RTTJAR=`locate RLRootToTip.jar | head -n 1`
            filter_by_name -l {cluster} {align} > $SUBSET
            fasttreeMP -nt -gtr -quiet < $SUBSET | nw_reroot - > $UNROOTED
            java -jar $RTTJAR -timetree $ROOTED -newick $UNROOTED
            python3 -c "from Bio import Phylo; Phylo.convert('$ROOTED', 'nexus', '{subtree}', 'newick')"
            rm $SUBSET $ROOTED $UNROOTED

    abc-config:
        Extension: yaml
        Parameters:
            m_min: 2
            m_max: 6
            alpha_min: 0
            alpha_max: 2
            N_max: 10000
            I_max: 10000
        Interpreter: bash
        Depends: subtree
        Rule: |
            NTIP=`treestat -s ntip {subtree}`
            echo "N: [\"uniform\", $NTIP, {N_max}]" > {abc-config}
            echo "I: [\"uniform\", $NTIP, {I_max}]" >> {abc-config}
            echo "time: 0" >> {abc-config}
            echo "transmit_rate: 1" >> {abc-config}
            echo "remove_rate: 0" >> {abc-config}
            echo "m: [\"uniform\", {m_min}, {m_max}]" >> {abc-config}
            echo "alpha: [\"uniform\", {alpha_min}, {alpha_max}]" >> {abc-config}

    abc:
        Extension: tsv
        Sleep: 600
        Threads: 12
        Walltime: 08:00:00
        Parameters:
            decay_factor: 0.3
            rbf_variance: 4
            nltt: 0
            nparticle: 1000
            nsample: 5
            quality: 0.95
            final_epsilon: 0.0
            final_accept: 0.015
            m_min: 2
            m_max: 6
            N_max: 10000
            I_max: 10000
            alpha_min: 0
            alpha_max: 2
        Depends: tree abc-config
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {abc}
            if [[ {nltt} -eq 1 ]]; then
                NLTT=--nltt
            else
                NLTT=""
            fi
            netabc --num-threads 12 --decay-factor {decay_factor} \
                   --rbf-variance {rbf_variance} --num-particles {nparticle} \
                   --num-samples {nsample} --quality {quality} --seed {seed} \
                   --final-epsilon {final_epsilon} --final-accept {final_accept} \
                   $NLTT --net-type pa --trace {abc} --seed {seed} {tree} {abc-config}
            echo "EOF" >> {abc}
