Name: gridsearch-pareto
Description: Grid search for Pareto network shape parameter
Processes: 1
Sleep: 5
Hostname: (hermes.*)|(litai.*.westgrid.ca)
Memory: 256m
Steps:
    train-network:
        Extension: gml.bz2
        Walltime: 00:00:30
        Parameters:
            nnode: 5000
            pareto_shape: "[i/100 for i in range(80, 201)]"
            replicate: "range(10)"
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(VGAM))
        Rule: | 
            set.seed({seed})
            g <- sample_degseq(2, method="simple")
            while (any(which_loop(g)) | any(which_multiple(g))) 
            {{
                s <- 1
                while (!is_graphical(s)) {{
                    s <- round(rpareto({nnode}, shape={pareto_shape}))
                }}
                g <- tryCatch({{sample_degseq(s, method="vl")}},
                              error = function (e) sample_degseq(2, method="simple"))
                                
            }}
            graph_attr(g, "comment") <- "{yaml}"
            f <- bzfile("{train-network}", "wb")
            write.graph(SIR.net(g), f, format="gml")
            close(f)

    train-tree:
        Extension: nwk
        Walltime: 00:00:30
        Parameters:
            pareto_shape: "[i/100 for i in range(80, 201)]"
            replicate: "range(10)"
            nsimnode: 1000
            ntip: [500, 1000]
        Depends: train-network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {train-tree}                                                 
            bzcat {train-network} | nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} >> {train-tree}

    test-network:
        Extension: gml.bz2
        Walltime: 00:00:30
        Parameters:
            nnode: 5000
            true_pareto_shape: [1.1, 1.5, 1.9]
            test_replicate: "range(10)"
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(VGAM))
        Rule: | 
            set.seed({seed})
            g <- sample_degseq(2, method="simple")
            while (any(which_loop(g)) | any(which_multiple(g))) 
            {{
                s <- 1
                while (!is_graphical(s)) {{
                    s <- round(rpareto({nnode}, shape={true_pareto_shape}))
                }}
                g <- tryCatch({{sample_degseq(s, method="vl")}},
                              error = function (e) sample_degseq(2, method="simple"))
                                
            }}
            graph_attr(g, "comment") <- "{yaml}"
            f <- bzfile("{test-network}", "wb")
            write.graph(SIR.net(g), f, format="gml")
            close(f)

    test-tree:
        Extension: nwk
        Walltime: 00:00:30
        Parameters:
            true_pareto_shape: [1.1, 1.5, 1.9]
            test_replicate: "range(10)"
            nsimnode: 1000
            ntip: [500, 1000]
        Depends: test-network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {test-tree}                                                 
            bzcat {test-network} | nettree --sim-nodes {nsimnode} --tree-tips {ntip} --seed {seed} >> {test-tree}

    kernel:
        Extension: tsv
        Sleep: 300
        Processes: 10
        Walltime: 01:00:00
        Parameters:
            ntip: [500, 1000]
            true_pareto_shape: [1.1, 1.5, 1.9]
            test_replicate: "range(10)"
            decay_factor: 0.4
            rbf_variance: [1, 5]
            nltt: 0
        Exclusions:
            -
                ntip: 500
                rbf_variance: 5
            -
                ntip: 1000
                rbf_variance: 1
        Depends: train-tree test-tree
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {kernel}
            if [[ {nltt} -eq 1 ]]; then
                NLTT="--nLTT"
            else
                NLTT=""
            fi
            for T in {train-tree}; do
                echo -n "$T"$'\t' >> {kernel}
                treekernel --ladderize --normalize --scale-branches mean \
                           --decay-factor {decay_factor} \
                           --gauss-factor {rbf_variance} \
                           $NLTT {test-tree} $T >> {kernel}
            done

    kernel-plot:
        Extension: pdf
        Walltime: 00:02:00
        Parameters:
            true_pareto_shape: [1.1, 1.5, 1.9]
            test_replicate: [0, 1, 2]
            ntip: [500, 1000]
        Depends: kernel train-tree
        Interpreter: R --quiet --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            k <- read.table("{kernel}", row.names=1, col.names=c("", "score"))
            k <- merge(k, collect.metadata(strsplit("{train-tree}", " ")[[1]]), by=0)
            pt.est <- with(k, as.numeric(names(which.max(tapply(score, pareto_shape, mean)))))
            lines <- data.frame(value=c(pt.est, {true_pareto_shape}),
                                pareto_shape=c("estimated", "true"))
            ggplot(k, aes(x=pareto_shape, y=score)) + geom_point() +
                geom_vline(data=lines, aes(xintercept=value, linetype=pareto_shape, color=pareto_shape), show_guide = TRUE) +
                theme_bw() 
            ggsave("{kernel-plot}")

    error-plot:
        Extension: pdf
        Walltime: 00:02:00
        Parameters:
            ntip: [500, 1000]
        Depends: kernel test-tree train-tree
        Interpreter: R --quiet --vanilla
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(data.table))
            suppressPackageStartupMessages(library(reshape2))
        Rule: |
            # collect all kernel scores
            files <- strsplit("{kernel}", " ")[[1]]
            d <- collect.data(files, header=FALSE, col.names=c("tree", "score"))

            # combine with metadata from train and test trees
            test.cols <- c("test_replicate", "true_pareto_shape")
            d <- merge(d, collect.metadata(strsplit("{train-tree}", " ")[[1]]), by.x="tree", by.y=0)
            d <- merge(d, collect.metadata(strsplit("{test-tree}", " ")[[1]]), by=test.cols)
            setDT(d)

            # choose point estimate with highest median kernel score
            d[,agg := median(score), by=c(test.cols, "pareto_shape")]

            # compute absolute and relative errors
            plot.data <- d[,abs(true_pareto_shape - pareto_shape[which.max(agg)]), by=test.cols]
            plot.data <- setNames(plot.data, c(test.cols, "absolute"))
            plot.data[,relative := absolute / true_pareto_shape]
            plot.data <- melt(plot.data, id.vars=test.cols, variable.name="error.type", value.name="error")
            plot.data <- plot.data[,true_pareto_shape := as.factor(true_pareto_shape)]

            # plot the errors
            ggplot(plot.data, aes(x=true_pareto_shape, y=error, group=true_pareto_shape)) + 
                geom_boxplot() + ggtitle("ntip = {ntip}") +
                facet_wrap(~error.type, scales="free") + theme_bw()
            ggsave("{error-plot}")
