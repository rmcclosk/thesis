Name: pcbr-validation
Processes: 8
Steps:
    network:
        Extension: gml
        Parameters:
            nnode: 5000
            mean_degree: 8
            seed: !!python/object/apply:__builtin__.xrange [0, 10, 1]
            num_clusters: [2, 10, 20, 50, 100, 200]
            cluster_size: [5, 10, 50, 100]
            cluster_rate: 4
            attach_power: [0.1, 0.5, 1]
            connect: "TRUE"
        Exclusions:
            -
                cluster_size: 10
                num_clusters: [200]
            - 
                cluster_size: 20
                num_clusters: [100, 200]
            -
                cluster_size: 50
                num_clusters: [50, 100, 200]
            -
                cluster_size: 100
                num_clusters: [20, 50, 100, 200]
        Interpreter: R --vanilla --silent
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(igraph))
        Rule: |
            set.seed({seed})
            g <- barabasi.game({nnode}, m={mean_degree}/2, power={attach_power}, directed=F)
            graph_attr(g, "comment") <- "{yaml}"
            g <- add.transmission.clusters(g, {cluster_size}, {num_clusters}, {cluster_rate}, {connect})
            write.graph(SI.net(g), "{network}", format="gml")

    tree:
        Extension: nwk
        Parameters:
            nnode: 5000
            mean_degree: 8
            seed: !!python/object/apply:__builtin__.xrange [0, 10, 1]
            num_clusters: [2, 10, 20, 50, 100, 200]
            cluster_size: [5, 10, 50, 100]
            cluster_rate: 4
            attach_power: [0.1, 0.5, 1]
            connect: "TRUE"
            nsimnode: 1000
            tree_tips: 200
        Depends: network
        Interpreter: bash
        Rule: |
            echo "#{yaml}" > {tree}
            nettree --sim-nodes {nsimnode} --tree-tips {tree_tips} --seed {seed} {network} >> {tree}

    cluster-plot:
        Extension: pdf
        Parameters:
            nnode: 5000
            mean_degree: 8
            seed: !!python/object/apply:__builtin__.xrange [0, 10, 1]
            num_clusters: [2, 10, 20, 50, 100, 200]
            cluster_size: [5, 10, 50, 100]
            cluster_rate: 4
            attach_power: [0.1, 0.5, 1]
            connect: "TRUE"
            nsimnode: 1000
            tree_tips: 200
        Depends: tree network
        Interpreter: R --vanilla --silent
        Rule: |
            library(netabc)
            net <- read.graph("{network}", "gml")
            tree <- read.tree("{tree}")
            pdf("{cluster-plot}")
            par(mar=c(0, 0, 4, 0) + 0.1)
            cluster.plot(net, tree, yaml="{yaml}", direction="down", status.only=TRUE, show.tip.label=FALSE)
            dev.off()

    clustering:
        Extension: tsv
        Parameters:
            nnode: 5000
            mean_degree: 8
            seed: !!python/object/apply:__builtin__.xrange [0, 10, 1]
            num_clusters: [2, 10, 20, 50, 100, 200]
            cluster_size: [5, 10, 50, 100]
            cluster_rate: 4
            attach_power: [0.1, 0.5, 1]
            connect: "TRUE"
            nsimnode: 1000
            tree_tips: 200
            nrates: [2, 3, 4]
            bg_rates: [1, 2, 3]
            ubound_branch: [1, 0.143, 0.0333]
            ubound_trans: [1, 0.143, 0.0333]
            use_tips: ["no", "yes"]
            trans_at_nodes: ["no", "yes"]
        Exclusions:
            -
                nrates: 2
                bg_rates: [2, 3, 4]
            -
                nrates: 3
                bg_rates: [3, 4]
            -
                nrates: 4
                bg_rates: 4
        Depends: tree
        Interpreter: bash
        Rule: |
            echo stopTolFun 10 > cmaes.par
            echo stopTolFunHist 10 >> cmaes.par
            echo "#{yaml}" > {clustering}
            if [[ "x{trans_at_nodes}" == "xyes" ]]; then
                if [[ "x{use_tips}" == "xyes" ]]; then
                    pcbr -c cmaes.par --ubound-branch {ubound_branch} --ubound-trans {ubound_trans} --rates {nrates} --bg-states {bg_rates} {tree} >> {clustering}
                else
                    pcbr -c cmaes.par --ubound-branch {ubound_branch} --ubound-trans {ubound_trans} --rates {nrates} --bg-states {bg_rates} --ignore-tips {tree} >> {clustering}
                 fi
            else
                if [[ "x{use_tips}" == "xyes" ]]; then
                    pcbr -c cmaes.par --ubound-branch {ubound_branch} --ubound-trans {ubound_trans} --trans-at-nodes --rates {nrates} --bg-states {bg_rates} {tree} >> {clustering}
                else
                    pcbr -c cmaes.par --ubound-branch {ubound_branch} --ubound-trans {ubound_trans} --trans-at-nodes --rates {nrates} --bg-states {bg_rates} --ignore-tips {tree} >> {clustering}
                fi
            fi

    confusion-matrix:
        Extension: tsv
        Parameters:
            nnode: 5000
            mean_degree: 8
            seed: !!python/object/apply:__builtin__.xrange [0, 10, 1]
            num_clusters: [2, 10, 20, 50, 100, 200]
            cluster_size: [5, 10, 50, 100]
            cluster_rate: 4
            attach_power: [0.1, 0.5, 1]
            connect: "TRUE"
            nsimnode: 1000
            tree_tips: 200
            nrates: [2, 3, 4]
            bg_rates: [1, 2, 3]
            ubound_branch: [1, 0.143, 0.0333]
            ubound_trans: [1, 0.143, 0.0333]
            use_tips: ["no", "yes"]
            trans_at_nodes: ["no", "yes"]
        Exclusions:
            -
                nrates: 2
                bg_rates: [2, 3, 4]
            -
                nrates: 3
                bg_rates: [3, 4]
            -
                nrates: 4
                bg_rates: 4
        Depends: tree network clustering
        Interpreter: R --vanilla --silent
        Rule: |
            library(netabc)
            tree <- read.tree("{tree}")
            net <- read.graph("{network}", "gml")
            pcbr.out <- read.table("{clustering}")
            node.numbers <- as.integer(c(tree$tip.label, tree$node.label))
            tree.clusters <- V(net)$cluster[node.numbers]
            pcbr.out[,2]
