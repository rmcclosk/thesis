Name: sir
Description: Epidemic growth on contact networks
Processes: 1
Sleep: 5
Steps:
    network:
        Extension: gml
        Walltime: 00:00:30
        Parameters:
            net_type: ["full", "pa"]
            model: ["si", "sir"]
        Interpreter: R --vanilla --silent
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: | 
            set.seed({seed})
            if ("{net_type}" == "pa") {{
                g <- sample_pa(1000, m=2, directed=FALSE)
            }} else {{
                g <- make_full_graph(1000, directed=FALSE)
            }}
            if ("{model}" == "sir") {{
                g <- SIR.net(g, transmit.rate=2.0/ecount(g), remove.rate=1.0/vcount(g))
            }} else {{
                g <- SIR.net(g, transmit.rate=2.0/ecount(g))
            }}
            graph_attr(g, "comment") <- "{yaml}"
            write.graph(g, "{network}", format="gml")

    tree:
        Extension: nwk
        Walltime: 00:00:30
        Parameters:
            net_type: ["full", "pa"]
            model: ["si", "sir"]
            replicate: "range(100)"
        Depends: network
        Interpreter: bash
        Rule: |
            TF=`mktemp`
            echo "#{yaml}" > {tree}
            nettree {network} > $TF
            while [[ `treestat -s ntip $TF` -eq 1 ]]; do
                sleep 1
                nettree {network} > $TF
            done
            cat $TF >> {tree}

    trajectory:
        Extension: tsv
        Parameters:
            net_type: ["full", "pa"]
            model: ["si", "sir"]
            replicate: "range(100)"
        Depends: network tree
        Interpreter: R --silent --vanilla
        Startup: suppressPackageStartupMessages(library(netabc))
        Rule: |
            N <- vcount(read.graph("{network}", "gml"))
            t <- read.tree("{tree}")
            times <- node.depth.edgelength(t)
            time.order <- order(times)
            times <- times[time.order]

            S <- N-2
            I <- 2
            R <- 0

            for (i in tail(time.order, -1)) {{
                # removal
                if (i <= Ntip(t) & "{model}" == "sir") {{
                    S <- c(S, tail(S, 1))
                    I <- c(I, tail(I, 1)-1)
                    R <- c(R, tail(R, 1)+1)
                }}

                # infection
                else if (i > Ntip(t)) {{
                    S <- c(S, tail(S, 1)-1)
                    I <- c(I, tail(I, 1)+1)
                    R <- c(R, tail(R, 1))
                }}

                else {{
                    S <- c(S, tail(S, 1))
                    I <- c(I, tail(I, 1))
                    R <- c(R, tail(R, 1))
                }}
            }}

            if ("{model}" == "sir") {{
                df <- data.frame(t=times, S=S, I=I, R=R)
            }} else {{
                df <- unique(data.frame(t=times, S=S, I=I))
            }}
            cat("#{yaml}\n", file="{trajectory}")
            write.tsv(df, "{trajectory}", append=TRUE)

    trajectory-plot:
        Extension: pdf
        Parameters:
            model: ["si", "sir"]
            orientation: ["horizontal", "vertical"]
        Depends: trajectory
        Interpreter: R --silent --vanilla
        Startup: |
            suppressPackageStartupMessages(library(netabc))
            suppressPackageStartupMessages(library(ggthemes))
        Rule: |
            d <- setDT(collect.data(strsplit("{trajectory}", " ")[[1]]))
            d <- melt(d, id.vars=c("t", "net_type", "replicate", "model"),
                      variable.name="compartment", value.name="population")
            d[,net_type := factor(net_type, levels=c("full", "pa"), 
                                  labels=c("random contacts", "structured contacts"))]
            d[,compartment := factor(compartment, levels=c("S", "I", "R"), 
                                     labels=c("susceptible", "infected", "recovered"))]
            xmax <- ifelse("{model}" == "si", 3000, 7500)
            p <- ggplot(d, aes(x=t, y=population, color=compartment)) + 
                stat_smooth() +
                theme_classic() 
            if ("{orientation}" == "horizontal") {{
                p <- p + facet_grid(~net_type)
            }} else {{
                p <- p + facet_grid(net_type~.)
            }}
            p + xlim(0, xmax) +
                labs(x="time") +
                theme(text=element_text(size=18),
                      legend.position="top",
                      axis.text=element_blank(),
                      axis.ticks=element_blank(),
                      panel.border=element_rect(colour="black", fill=NA),
                      legend.direction="vertical",
                      legend.title=element_blank()) +
            if ("{orientation}" == "horizontal") {{
                ggsave("{trajectory-plot}", height=5)
            }} else {{
                ggsave("{trajectory-plot}", width=3, height=6)
            }}
